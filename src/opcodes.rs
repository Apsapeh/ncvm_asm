#[derive(Debug)]
#[derive(Clone, Copy)]
#[repr(u8)]
pub enum Opcode {
	NOP = 0,
	STOP = 1,
	RET = 2,
	IPUSH = 3,
	IPOP = 4,
	ISTLD = 5,
	ISTST = 6,
	LPUSH = 7,
	LPOP = 8,
	LSTLD = 9,
	LSTST = 10,
	FPUSH = 11,
	FPOP = 12,
	FSTLD = 13,
	FSTST = 14,
	DPUSH = 15,
	DPOP = 16,
	DSTLD = 17,
	DSTST = 18,
	ALLOC = 19,
	FREE = 20,
	HELD = 21,
	HEST = 22,
	IMOV = 23,
	LMOV = 24,
	FMOV = 25,
	DMOV = 26,
	ISR = 27,
	LSR = 28,
	FSR = 29,
	DSR = 30,
	ISMLD = 31,
	ISMST = 32,
	LSMLD = 33,
	LSMST = 34,
	FSMLD = 35,
	FSMST = 36,
	DSMLD = 37,
	DSMST = 38,
	IADD = 39,
	ISUB = 40,
	IMULT = 41,
	IDIV = 42,
	IMOD = 43,
	IINC = 44,
	IDEC = 45,
	LADD = 46,
	LSUB = 47,
	LMULT = 48,
	LDIV = 49,
	LMOD = 50,
	LINC = 51,
	LDEC = 52,
	FADD = 53,
	FSUB = 54,
	FMULT = 55,
	FDIV = 56,
	FINC = 57,
	FDEC = 58,
	DADD = 59,
	DSUB = 60,
	DMULT = 61,
	DDIV = 62,
	DINC = 63,
	DDEC = 64,
	FTOI = 65,
	ITOF = 66,
	DTOI = 67,
	ITOD = 68,
	FTOL = 69,
	LTOF = 70,
	DTOL = 71,
	LTOD = 72,
	FTOD = 73,
	DTOF = 74,
	JMP = 75,
	IJEZ = 76,
	IJNZ = 77,
	IJEQ = 78,
	IJNQ = 79,
	IJML = 80,
	IJEL = 81,
	IJMG = 82,
	IJEG = 83,
	LJEZ = 84,
	LJNZ = 85,
	LJEQ = 86,
	LJNQ = 87,
	LJML = 88,
	LJEL = 89,
	LJMG = 90,
	LJEG = 91,
	FJEZ = 92,
	FJNZ = 93,
	FJEQ = 94,
	FJNQ = 95,
	FJML = 96,
	FJEL = 97,
	FJMG = 98,
	FJEG = 99,
	DJEZ = 100,
	DJNZ = 101,
	DJEQ = 102,
	DJNQ = 103,
	DJML = 104,
	DJEL = 105,
	DJMG = 106,
	DJEG = 107,
	L_CALL = 108,
}

/*struct CommandMapNode {
	key: &'static str,
	val: Opcode
}

impl CommandMapNode {
	pub const fn new(key: &'static str, val: Opcode) -> CommandMapNode {
		CommandMapNode {key, val}
	}
}

static b: [CommandMapNode; 109] = [
	CommandMapNode::new("nop", Opcode::NOP),
	CommandMapNode::new("stop", Opcode::STOP),
	CommandMapNode::new("ret", Opcode::RET),
	CommandMapNode::new("ipush", Opcode::IPUSH),
	CommandMapNode::new("ipop", Opcode::IPOP),
	CommandMapNode::new("istld", Opcode::ISTLD),
	CommandMapNode::new("istst", Opcode::ISTST),
	CommandMapNode::new("lpush", Opcode::LPUSH),
	CommandMapNode::new("lpop", Opcode::LPOP),
	CommandMapNode::new("lstld", Opcode::LSTLD),
	CommandMapNode::new("lstst", Opcode::LSTST),
	CommandMapNode::new("fpush", Opcode::FPUSH),
	CommandMapNode::new("fpop", Opcode::FPOP),
	CommandMapNode::new("fstld", Opcode::FSTLD),
	CommandMapNode::new("fstst", Opcode::FSTST),
	CommandMapNode::new("dpush", Opcode::DPUSH),
	CommandMapNode::new("dpop", Opcode::DPOP),
	CommandMapNode::new("dstld", Opcode::DSTLD),
	CommandMapNode::new("dstst", Opcode::DSTST),
	CommandMapNode::new("alloc", Opcode::ALLOC),
	CommandMapNode::new("free", Opcode::FREE),
	CommandMapNode::new("held", Opcode::HELD),
	CommandMapNode::new("hest", Opcode::HEST),
	CommandMapNode::new("imov", Opcode::IMOV),
	CommandMapNode::new("lmov", Opcode::LMOV),
	CommandMapNode::new("fmov", Opcode::FMOV),
	CommandMapNode::new("dmov", Opcode::DMOV),
	CommandMapNode::new("isr", Opcode::ISR),
	CommandMapNode::new("lsr", Opcode::LSR),
	CommandMapNode::new("fsr", Opcode::FSR),
	CommandMapNode::new("dsr", Opcode::DSR),
	CommandMapNode::new("ismld", Opcode::ISMLD),
	CommandMapNode::new("ismst", Opcode::ISMST),
	CommandMapNode::new("lsmld", Opcode::LSMLD),
	CommandMapNode::new("lsmst", Opcode::LSMST),
	CommandMapNode::new("fsmld", Opcode::FSMLD),
	CommandMapNode::new("fsmst", Opcode::FSMST),
	CommandMapNode::new("dsmld", Opcode::DSMLD),
	CommandMapNode::new("dsmst", Opcode::DSMST),
	CommandMapNode::new("iadd", Opcode::IADD),
	CommandMapNode::new("isub", Opcode::ISUB),
	CommandMapNode::new("imult", Opcode::IMULT),
	CommandMapNode::new("idiv", Opcode::IDIV),
	CommandMapNode::new("imod", Opcode::IMOD),
	CommandMapNode::new("iinc", Opcode::IINC),
	CommandMapNode::new("idec", Opcode::IDEC),
	CommandMapNode::new("ladd", Opcode::LADD),
	CommandMapNode::new("lsub", Opcode::LSUB),
	CommandMapNode::new("lmult", Opcode::LMULT),
	CommandMapNode::new("ldiv", Opcode::LDIV),
	CommandMapNode::new("lmod", Opcode::LMOD),
	CommandMapNode::new("linc", Opcode::LINC),
	CommandMapNode::new("ldec", Opcode::LDEC),
	CommandMapNode::new("fadd", Opcode::FADD),
	CommandMapNode::new("fsub", Opcode::FSUB),
	CommandMapNode::new("fmult", Opcode::FMULT),
	CommandMapNode::new("fdiv", Opcode::FDIV),
	CommandMapNode::new("finc", Opcode::FINC),
	CommandMapNode::new("fdec", Opcode::FDEC),
	CommandMapNode::new("dadd", Opcode::DADD),
	CommandMapNode::new("dsub", Opcode::DSUB),
	CommandMapNode::new("dmult", Opcode::DMULT),
	CommandMapNode::new("ddiv", Opcode::DDIV),
	CommandMapNode::new("dinc", Opcode::DINC),
	CommandMapNode::new("ddec", Opcode::DDEC),
	CommandMapNode::new("ftoi", Opcode::FTOI),
	CommandMapNode::new("itof", Opcode::ITOF),
	CommandMapNode::new("dtoi", Opcode::DTOI),
	CommandMapNode::new("itod", Opcode::ITOD),
	CommandMapNode::new("ftol", Opcode::FTOL),
	CommandMapNode::new("ltof", Opcode::LTOF),
	CommandMapNode::new("dtol", Opcode::DTOL),
	CommandMapNode::new("ltod", Opcode::LTOD),
	CommandMapNode::new("ftod", Opcode::FTOD),
	CommandMapNode::new("dtof", Opcode::DTOF),
	CommandMapNode::new("jmp", Opcode::JMP),
	CommandMapNode::new("ijez", Opcode::IJEZ),
	CommandMapNode::new("ijnz", Opcode::IJNZ),
	CommandMapNode::new("ijeq", Opcode::IJEQ),
	CommandMapNode::new("ijnq", Opcode::IJNQ),
	CommandMapNode::new("ijml", Opcode::IJML),
	CommandMapNode::new("ijel", Opcode::IJEL),
	CommandMapNode::new("ijmg", Opcode::IJMG),
	CommandMapNode::new("ijeg", Opcode::IJEG),
	CommandMapNode::new("ljez", Opcode::LJEZ),
	CommandMapNode::new("ljnz", Opcode::LJNZ),
	CommandMapNode::new("ljeq", Opcode::LJEQ),
	CommandMapNode::new("ljnq", Opcode::LJNQ),
	CommandMapNode::new("ljml", Opcode::LJML),
	CommandMapNode::new("ljel", Opcode::LJEL),
	CommandMapNode::new("ljmg", Opcode::LJMG),
	CommandMapNode::new("ljeg", Opcode::LJEG),
	CommandMapNode::new("fjez", Opcode::FJEZ),
	CommandMapNode::new("fjnz", Opcode::FJNZ),
	CommandMapNode::new("fjeq", Opcode::FJEQ),
	CommandMapNode::new("fjnq", Opcode::FJNQ),
	CommandMapNode::new("fjml", Opcode::FJML),
	CommandMapNode::new("fjel", Opcode::FJEL),
	CommandMapNode::new("fjmg", Opcode::FJMG),
	CommandMapNode::new("fjeg", Opcode::FJEG),
	CommandMapNode::new("djez", Opcode::DJEZ),
	CommandMapNode::new("djnz", Opcode::DJNZ),
	CommandMapNode::new("djeq", Opcode::DJEQ),
	CommandMapNode::new("djnq", Opcode::DJNQ),
	CommandMapNode::new("djml", Opcode::DJML),
	CommandMapNode::new("djel", Opcode::DJEL),
	CommandMapNode::new("djmg", Opcode::DJMG),
	CommandMapNode::new("djeg", Opcode::DJEG),
	CommandMapNode::new("l_call", Opcode::L_CALL)
];*/

impl Opcode {
	pub fn from_str(opcode: &str) -> Option<Opcode> {
		/*for c in &b {
			if c.key == opcode {
				return Some(c.val)
			}
		};
		None*/

		match opcode {
			"nop" => Some(Opcode::NOP),
			"stop" => Some(Opcode::STOP),
			"ret" => Some(Opcode::RET),
			"ipush" => Some(Opcode::IPUSH),
			"ipop" => Some(Opcode::IPOP),
			"istld" => Some(Opcode::ISTLD),
			"istst" => Some(Opcode::ISTST),
			"lpush" => Some(Opcode::LPUSH),
			"lpop" => Some(Opcode::LPOP),
			"lstld" => Some(Opcode::LSTLD),
			"lstst" => Some(Opcode::LSTST),
			"fpush" => Some(Opcode::FPUSH),
			"fpop" => Some(Opcode::FPOP),
			"fstld" => Some(Opcode::FSTLD),
			"fstst" => Some(Opcode::FSTST),
			"dpush" => Some(Opcode::DPUSH),
			"dpop" => Some(Opcode::DPOP),
			"dstld" => Some(Opcode::DSTLD),
			"dstst" => Some(Opcode::DSTST),
			"alloc" => Some(Opcode::ALLOC),
			"free" => Some(Opcode::FREE),
			"held" => Some(Opcode::HELD),
			"hest" => Some(Opcode::HEST),
			"imov" => Some(Opcode::IMOV),
			"lmov" => Some(Opcode::LMOV),
			"fmov" => Some(Opcode::FMOV),
			"dmov" => Some(Opcode::DMOV),
			"isr" => Some(Opcode::ISR),
			"lsr" => Some(Opcode::LSR),
			"fsr" => Some(Opcode::FSR),
			"dsr" => Some(Opcode::DSR),
			"ismld" => Some(Opcode::ISMLD),
			"ismst" => Some(Opcode::ISMST),
			"lsmld" => Some(Opcode::LSMLD),
			"lsmst" => Some(Opcode::LSMST),
			"fsmld" => Some(Opcode::FSMLD),
			"fsmst" => Some(Opcode::FSMST),
			"dsmld" => Some(Opcode::DSMLD),
			"dsmst" => Some(Opcode::DSMST),
			"iadd" => Some(Opcode::IADD),
			"isub" => Some(Opcode::ISUB),
			"imult" => Some(Opcode::IMULT),
			"idiv" => Some(Opcode::IDIV),
			"imod" => Some(Opcode::IMOD),
			"iinc" => Some(Opcode::IINC),
			"idec" => Some(Opcode::IDEC),
			"ladd" => Some(Opcode::LADD),
			"lsub" => Some(Opcode::LSUB),
			"lmult" => Some(Opcode::LMULT),
			"ldiv" => Some(Opcode::LDIV),
			"lmod" => Some(Opcode::LMOD),
			"linc" => Some(Opcode::LINC),
			"ldec" => Some(Opcode::LDEC),
			"fadd" => Some(Opcode::FADD),
			"fsub" => Some(Opcode::FSUB),
			"fmult" => Some(Opcode::FMULT),
			"fdiv" => Some(Opcode::FDIV),
			"finc" => Some(Opcode::FINC),
			"fdec" => Some(Opcode::FDEC),
			"dadd" => Some(Opcode::DADD),
			"dsub" => Some(Opcode::DSUB),
			"dmult" => Some(Opcode::DMULT),
			"ddiv" => Some(Opcode::DDIV),
			"dinc" => Some(Opcode::DINC),
			"ddec" => Some(Opcode::DDEC),
			"ftoi" => Some(Opcode::FTOI),
			"itof" => Some(Opcode::ITOF),
			"dtoi" => Some(Opcode::DTOI),
			"itod" => Some(Opcode::ITOD),
			"ftol" => Some(Opcode::FTOL),
			"ltof" => Some(Opcode::LTOF),
			"dtol" => Some(Opcode::DTOL),
			"ltod" => Some(Opcode::LTOD),
			"ftod" => Some(Opcode::FTOD),
			"dtof" => Some(Opcode::DTOF),
			"jmp" => Some(Opcode::JMP),
			"ijez" => Some(Opcode::IJEZ),
			"ijnz" => Some(Opcode::IJNZ),
			"ijeq" => Some(Opcode::IJEQ),
			"ijnq" => Some(Opcode::IJNQ),
			"ijml" => Some(Opcode::IJML),
			"ijel" => Some(Opcode::IJEL),
			"ijmg" => Some(Opcode::IJMG),
			"ijeg" => Some(Opcode::IJEG),
			"ljez" => Some(Opcode::LJEZ),
			"ljnz" => Some(Opcode::LJNZ),
			"ljeq" => Some(Opcode::LJEQ),
			"ljnq" => Some(Opcode::LJNQ),
			"ljml" => Some(Opcode::LJML),
			"ljel" => Some(Opcode::LJEL),
			"ljmg" => Some(Opcode::LJMG),
			"ljeg" => Some(Opcode::LJEG),
			"fjez" => Some(Opcode::FJEZ),
			"fjnz" => Some(Opcode::FJNZ),
			"fjeq" => Some(Opcode::FJEQ),
			"fjnq" => Some(Opcode::FJNQ),
			"fjml" => Some(Opcode::FJML),
			"fjel" => Some(Opcode::FJEL),
			"fjmg" => Some(Opcode::FJMG),
			"fjeg" => Some(Opcode::FJEG),
			"djez" => Some(Opcode::DJEZ),
			"djnz" => Some(Opcode::DJNZ),
			"djeq" => Some(Opcode::DJEQ),
			"djnq" => Some(Opcode::DJNQ),
			"djml" => Some(Opcode::DJML),
			"djel" => Some(Opcode::DJEL),
			"djmg" => Some(Opcode::DJMG),
			"djeg" => Some(Opcode::DJEG),
			"l_call" => Some(Opcode::L_CALL),
			_ => None
		}
	}
}